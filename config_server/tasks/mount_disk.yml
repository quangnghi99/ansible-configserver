---
# --- Disk Mounting ---
- name: Ensure parted is installed
  ansible.builtin.package:
    name: parted
    state: present

- name: Partition disks
  community.general.parted:
    device: "{{ item.device }}"
    number: 1
    state: present
    part_type: primary
  loop: "{{ disks }}"
  loop_control:
    label: "{{ item.device }}"

- name: Create filesystem
  ansible.builtin.filesystem:
    fstype: "{{ item.fstype }}"
    dev: "{{ item.partition }}"
  loop: "{{ disks }}"
  loop_control:
    label: "{{ item.partition }}"

# Copy /var to /var_backup if mountpoint is /var
- name: Backup /var to /var_backup before mounting
  ansible.builtin.shell: |
    mkdir -p /var_backup
    cp -a /var/* /var_backup/ || true
  when: "'/var' in disks | map(attribute='mountpoint') | list"

# Create mount directory (skip if /var)
- name: Create mount directory
  ansible.builtin.file:
    path: "{{ item.mountpoint }}"
    state: directory
    mode: '0755'
  loop: "{{ disks }}"
  when: item.mountpoint != '/var'
  loop_control:
    label: "{{ item.mountpoint }}"

# Mount disk (skip if /var)
- name: Mount disk
  ansible.posix.mount:
    path: "{{ item.mountpoint }}"
    src: "{{ item.partition }}"
    fstype: "{{ item.fstype }}"
    state: mounted
  loop: "{{ disks }}"
  loop_control:
    label: "{{ item.partition }} -> {{ item.mountpoint }}"

# Persist mount in fstab (skip if /var)
- name: Persist mount in fstab
  ansible.posix.mount:
    path: "{{ item.mountpoint }}"
    src: "{{ item.partition }}"
    fstype: "{{ item.fstype }}"
    opts: defaults
    state: present
  loop: "{{ disks }}"
  loop_control:
    label: "{{ item.partition }}"

- name: Restore /var from /var_backup after mounting
  ansible.builtin.shell: |
    cp -a /var_backup/* /var/ || true
  when: "'/var' in disks | map(attribute='mountpoint') | list"

